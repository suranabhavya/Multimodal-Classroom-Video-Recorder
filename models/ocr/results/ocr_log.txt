[Frame 4770] [Timestamp 0:02:39]
Transformers — Part 2

LADS ~ Spring 2025

[Frame 7680] [Timestamp 0:04:16]
Transformers — Part 2

DDLADS= Spring 2025,

[Frame 7690] [Timestamp 0:04:16]
~ ‘

[Frame 7790] [Timestamp 0:04:19]
Transformers — Part 2

LADS Spring 2025

[Frame 8270] [Timestamp 0:04:35]
Spring 2025 DLADS Midterm Challenge

[Frame 20310] [Timestamp 0:11:17]
| Spring 2025 DLA4DS Midterm Challenge

[Frame 20350] [Timestamp 0:11:18]
Transformers — Part 2

‘LADS ~ Spring 2025

[Frame 20450] [Timestamp 0:11:21]
| Spring 2025 DL4DS Midterm Challenge

[Frame 20510] [Timestamp 0:11:23]
Spring 2025 DL4DS Midterm Challenge

e--

Basic Details ee
'

[Frame 20520] [Timestamp 0:11:24]
Spring 2025 DLADS Midterm Challenge

[Frame 20970] [Timestamp 0:11:39]
© Leaderboard

[Frame 21020] [Timestamp 0:11:40]
Transformers — Part 2

LADS ~ Spring 2025

[Frame 21160] [Timestamp 0:11:45]
BOSTON
UN 4

Transformers — Part 2

DLADS - Spring 2025

[Frame 21220] [Timestamp 0:11:47]
Transformers — Part 2

LADS — Spring 2025

[Frame 21230] [Timestamp 0:11:47]
Transformers — Part 2

DL4DS - Spring 2025

[Frame 25790] [Timestamp 0:14:19]
Recap From Part 1

* Motivation

* Dot-product self-attention

* Applying Self-Attention

* The Transformer Architecture

* Three Types of NLP Transformer
Models
* Encoder
* Decoder
* Encoder-Decoder

[Frame 26440] [Timestamp 0:14:41]
Transformers

* Motivation
* Dot-product self-attention

* Applying Self-Attention

* The Transformer Architecture
“Th

[Frame 26760] [Timestamp 0:14:52]
Join at
slido.com
#4111039

hens pot

Which model flavor do you use for Named Entity Recognition?

Encoder

Decoder

Encoder-Decoder

[Frame 37070] [Timestamp 0:20:35]
3 Types of Transformer Models

~ transforms text embeddings into representations that
support variety of tasks (e.g. sentiment analysis, classification)
‘% Model Example: BERT

— predicts the next token to continue the input text (e.g.
ChatGPT, Al assistants)
+ Model Example: GPT4, GPTa

— used in sequence-to-sequence tasks, where one
text string is converted to another (e.g. machine translation)

[Frame 37810] [Timestamp 0:21:00]
Next Token Selection

[Frame 37850] [Timestamp 0:21:01]
Next Token Selection

+ Recall: output is a [V|x1 vector of probabilities
+ How should we pick the next token?
+ Trade off between accuracy and diversity

[Frame 40100] [Timestamp 0:22:16]
Next Token Selection Probability of

target token

Recall: output is a |V|x1 vector of probabilities LL

Selectin methods:
* Greedy selection
* Top-K

+ Nucleus

+ Beam search

[Frame 40460] [Timestamp 0:22:28]
Probablity of

Next Token Selection — Greedy target token
oo 4

Pick most likely token (greedy)

i, = argmax [Pr(y, outputs = model (inputs)

value, index = outputs.nax(1)
Might pick first token yo, but then there is no y, where Pr(y| yo)
is high.

Result is generic and predictable. Same output for a given input
context

[Frame 45170] [Timestamp 0:25:05]
Next Token Selection -- Sampling Probability of

target token

Sample from the probability distribution I m

AN

Will occasionally sample from the long tail of the distribution,
producing some unlikely word combinations

[Frame 48460] [Timestamp 0:26:55]
. Probability of

Next Token Selection — Top K Sampling target token
aon a

1. Generate the probability vector as usual

2. Sort tokens by likelihood

3. Discard all but top k most probable words

4

Renormalize the probabilities to be valid probability distribution
(e.g. sum to 1)

. Sample from the new distribution

Depends on the distribution. Could be low variance, reducing diversity

[Frame 51630] [Timestamp 0:28:41]
- . Probabiity of
Next Token Selection — Nucleus Sampling —_ weet toten
=o
Instead of keeping top-k, keep the top p percent of the .
probability mass.

Choose from the smallest set from the vocabulary such
that
YS Powiwer) > p

wevir)

Depends on the distribution. Could be low variance,
reducing diversity

[Frame 54650] [Timestamp 0:30:21]
Next Token Selection — Beam Search
Commonly used in machine
translation

Maintain multiple output choices
and then choose best combinations
later via tree search

V = {yes, ok, <eos>}
We want to maximize p(ty, tz, t3).

Greedy: 0.5x0.4x1.0 = 0.20

[Frame 61180] [Timestamp 0:33:59]
Next Token Selection — Beam Search

But we can’t exhaustively search the entire vocabulary
Keep k tokens (beam width) at each step

[Frame 61410] [Timestamp 0:34:07]
Next Token Selection — Beam Search 208: Beginning of

Keep k tokens at each step

Eg.k=2

Prune to k at each step

[Frame 63230] [Timestamp 0:35:07]
Next Token Selection — Beam Search (k=2)

Calculated with fog
probabilities and add Pick the top 2 tokens.

[Frame 69770] [Timestamp 0:38:45]
Next Token Selection — Beam Search

We have 2 paths randomly
terminating at EOS with
same cumulative log
probabilities.

Randomly pick 1.

[Frame 73330] [Timestamp 0:40:44]
Next Token Selection

* Greedy selection
* Top-K

+ Nucleus

+ Beam search

[Frame 73680] [Timestamp 0:40:56]
Context Length of LLMs
Large Language Model Context Size

15 P10

,
lama 2 32K
¢
rr 3k
GPrA Ture, 128K
ama 3. ‘
Claude 35 200K
Sonnet ¢ |
Gootle Gemini Milions ee eee | |

[Frame 75810] [Timestamp 0:42:07]
Attention Matrix

W

Reve

Scales quadratically with
sequence length N, e.g. Ni

[Frame 82930] [Timestamp 0:46:04]
Masked Attention

a)

b)

~1/2 the interactions but
still scales quadratically

[Frame 83860] [Timestamp 0:46:35]
Use Convolutional Structure in Attention

a)

Wey Keys

Encoder Decoder
(non-causal) (causal)

[Frame 87150] [Timestamp 0:48:25]
Have some tokens interact g

Decoder Encoder

[Frame 93690] [Timestamp 0:52:03]
Tokenization and Word
Embedding

[Frame 94980] [Timestamp 0:52:46]
Tokenizer

character (ew
Unicode)
strings)

character (ea.
Unicode)
strings

chooses input “units”, e.g. words, sub-words, characters via tokenizer
training

In tokenizer training, commonly occurring substrings are greedily merged based on
their frequency, starting with character pairs

[Frame 98440] [Timestamp 0:54:41]
Tokenization Issues

+ Wy stim won at rans rguges (eg apanes) Toeration
+ Wy GP have more tan necessary woul ang in Phen? Theat,

[Frame 101550] [Timestamp 0:56:25]
Unicode Standard and UTF-8

* Unicode - variable length character encoding standard. currently defines 149,813
characters and 161 scripts, including emoji, symbols, et.

* Unicode Codepoint — can represent up to 17x26 = 1,114,112 entries. e.g
U+0000 ~ U+1OFFFF in hexadecimal

* Unicode Transformation Standard (e.g. UTF-8) ~is a variable length encoding

using one to four bytes
+ First 128 chars same as ASCIL

[Frame 106510] [Timestamp 0:59:10]
Tokenizer

Two common tokenizers:
* Byte Pair Encoding (BPE) ~ Used by OpenAl GPT2, GPT4, etc.
* The BPE algorithm is "byte-level” because it runs on UTF-8 encoded strings.

* This algorithm was popularized for LLMs by the GPT-2 paper and the
associated GPT-2 code release from OpenAl. Sennrich et al. 2015 is cited as,

the original reference for the use of BPE in NLP applications. Today, all
modern LLMs (e.g. GPT, Llama, Mistral) use this algorithm to train their
tokenizers.*

+ sentencepiece

+ (e.g. Llama, Mistral) use sentencepiece instead. Primary difference being that

sentencepiece runs BPE directly on Unicode code points instead of on UTF-8
encoded bytes.

[Frame 108370] [Timestamp 1:00:12]
BPE Pseudocode

Initialize vocabulary + individual characters in
the text and their frequencies
While desired vocabulary size not reached

Identify the most frequent pair of adjacent

tokens/characters in the vocabulary
Merge this pair to form a new token
Update the vocabulary with this new token

[Frame 111400] [Timestamp 1:01:53]
Enforce a Token Split Pattern

er2_spurt_partean @stsoaty I velre) | Pp(LIs1 B41
PUNTDILI BIND] #15215) Ns

GGPTA_SPLIT PATTERN = °°7° (24: {sdnth [U1 vel re) (°\r\n\pCL)\PO)12+\PKL)*1\B(00 (1.39
PEAVS\pAL}WpAN}] [Arn] +] \ 82 (rin [VS C2 48) 8

* Do not allow tokens to merge across certain characters or patterns
+ Common contraction endings: ‘l, ‘ve, ‘re

+ Match words with a leading space

* Match numeric sequences

* carriage returns, new lines

[Frame 113640] [Timestamp 1:03:08]
GPT4 Tokenizer 110k, bases the GPT4 tokenizer

Tiktokenizer

[Frame 115820] [Timestamp 1:04:20]
GPT2 Tokenizer

Tiktokenizer

You can see some issues with the
GPT2 tokenizer with respect to
python code

[Frame 117370] [Timestamp 1:05:12]
GPT4 Tokenizer

Tiktokenizer

Issues are improved with GPT4
tokenizer

[Frame 118150] [Timestamp 1:05:38]
a)

Sith nea Byte Pair Encoding (BPE) Example

[Frame 120450] [Timestamp 1:06:55]
Generally of tokens increases an
then easing ater
continuing to merge tokens

[Frame 121640] [Timestamp 1:07:34]
Learned Embeddings

‘Some txt strog> earned
Embedings: +
near Layer

After the tokenizer, you have an updated "vocabulary” indexed by token ID
Next step is to translate the token into an embedding vector

Translation is done via a linear layer which is typically learned with the rest of the
transformer model

self.embedding = on.Enbedding(vocab_size, enbedding_dim)
Special layer definition, likely to exploit sparsity of input

[Frame 126710] [Timestamp 1:10:23]
Embeddings Output

inthis example, we are
assuming a token is simaly 8
complete word

Input. X. Vocabulary embedaings. 2,

pial embedding ste, 0, is 1024
Typical vocabulary sz, |, 1 30,000 Token indices, T
0 30M parameters just fr ths matrix

[Frame 128250] [Timestamp 1:11:15]
Next Jupyter Notebook assignment

+ will release shortly

>self-attention
> multi-head self-attention

[Frame 128320] [Timestamp 1:11:17]
Embeddings Output

inthis example, we are
assuming a token Is simply 8
complete word

Input. X. Vocabulary embedcings, 9,

+ Typical embedding sie, 1024
+ ypical vocabulary size, V1, s 30,000 Token indices, T
+ 50304 parameters just fortis matrial

[Frame 128340] [Timestamp 1:11:18]
Next Jupyter Notebook assignment

+ will release shortly

>self-attention
> multi-head self-attention

[Frame 131420] [Timestamp 1:13:00]
Next Feedback

+ Image Transformers [O)

+ Multimodal Transformers

[Frame 131730] [Timestamp 1:13:11]
Next Feedback

+ Image Transformers
+ Multimodal Transformers

[Frame 132070] [Timestamp 1:13:22]
Next Feedback

+ Image Transformers
+ Multimodal Transformers

[Frame 132110] [Timestamp 1:13:23]
Next Feedback

+ Image Transformers
+ Multimodal Transformers

[Q}

0}
4
0}
